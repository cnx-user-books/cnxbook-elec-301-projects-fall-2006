<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Advantages of the Chosen Algorithms and Future Improvements</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>cef33738-733c-4c14-8b87-d248510339e6</md:uuid>
</metadata>
  <content>
    <para id="element-331">As far as registration is concerned, the method we chose was the most inclusive one. It enables us to have LR frames that are a zoomed, translated, panned, tilted or rotated versions of each other.  However, since it is based on derivatives at each pixel, it usually gives poor results with images that are dramatically different from each other.  To get around this issue, we could use additional techniques that detect large-scale differences before running the current registration algorithm, which would then refine that data.</para><para id="element-388">The interpolation algorithm that we implemented, though it takes advantage of Delaunay triangulation, uses averaging to determine new pixel values.  A more accurate interpolation could be obtained by approximating each triangle patch by a continuous function, such as the bivariate polynomial described in the Bose-Lertrattanapanich Pixel Interpolation module.  This would at the end generate a better HR image.</para><para id="delete_me">Nevertheless, our implementation still derives several of the same benefits as the Bose-Lertrattanapanich from the Delaunay triangulation model.  In particular, one of these benefits is the option of implementing an efficient update algorithm for an HR image.  The ability to update is important in that it allows more data to be incorporated into the final image should additional LR images become available after the original HR image was constructed.  In this respect, Delaunay triangulation is very efficient because the triangulation can be updated on a local basis; new points can be inserted without destroying the entire original triangulation.</para><figure id="element-776"><title>Site-insertion Example</title>
  <media id="idp3332928" alt=""><image src="../../media/siteinsert.bmp" mime-type="image/bmp"/></media>
  <caption>Origninal triangulation (top), Updated triangulation with vertex 9 inserted (bottom). (Source: 2)</caption></figure><para id="element-361">The algorithm for site insertion is described below:</para><list id="element-358" list-type="enumerated"><item>Find which triangles' circumcircles enclose the first new vertex (these triangles are now no longer Delaunay).</item>

<item>Define an insertion polygon by finding the convex hull of the vertices that make up all of the triangles from (1).</item>

<item>Eliminate all edges from the original triangulation that lie inside the insertion polygon.</item>

<item>Connect each vertex of the insertion polygon to the inserted vertex with a new edge to generate a new triangulation.</item>

<item>Update the old triangulation to the new and loop back to (1) to insert the next new vertex.</item>
</list>   
  </content>
  
</document>